@model BSMS.bsms.localhost.PRODUCER

@{
    ViewBag.Title = "Create";
    ViewBag.Page = "Producer";
    ViewBag.Action = "Add Producer";
    Layout = "~/Views/Shared/LDashboard.cshtml";
}

<div class="container">
    <div class="card">
        <div class="card-block">


            @using (Html.BeginForm("Create", "Producer", FormMethod.Post, new { enctype = "multipart/form-data", @class = "form-horizontal form-material", id= "ProducerForm" }))
            {
                @Html.AntiForgeryToken()

                <div class="form-horizontal">
                    <h4>PRODUCER</h4>
                    <hr />
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    <div class="form-group">
                        @Html.LabelFor(model => model.NAME, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.NAME, new { htmlAttributes = new { @class = "form-control form-control-line", required="true" } })
                            @Html.ValidationMessageFor(model => model.NAME, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.ADDRESS, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.ADDRESS, new { htmlAttributes = new { @class = "form-control form-control-line", required="true" } })
                            @Html.ValidationMessageFor(model => model.ADDRESS, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.CONTACT, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.CONTACT, new { htmlAttributes = new { @class = "form-control form-control-line", required="true" } })
                            @Html.ValidationMessageFor(model => model.CONTACT, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.EMAIL, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.EMAIL, new { htmlAttributes = new { @class = "form-control form-control-line", required="true" } })
                            @Html.ValidationMessageFor(model => model.EMAIL, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-10">
                            <input type="button" value="Create" class="btn btn-default" onclick="submitForm('ProducerForm','@Url.Action("Create", "Producer")', '@Url.Action("Index", "Producer")')" />
                        </div>
                    </div>
                </div>
            }

        </div>
    </div>
</div>



    @if (!String.IsNullOrEmpty(ViewBag.Message))
    {
        <script>

        var message = '@ViewBag.Message';
        swal({
            title: 'Walting',
            text: 'BSMS is processing your request',
            timer: 5000,
            type: 'error',
            background: '#fff url(http://www.planwallpaper.com/static/images/518151-backgrounds_W3qVPu2.jpg)'
        }).then(
        function () { },
// handling the promise rejection
            function (dismiss) {
                swal(
              'Information Message',
                message,
              'info'
            )
                setTimeout(donothing, 3000);
               window.location = '@Url.Action("Index","Producer")';
            }
        )

        function donothing() {

        }

        </script>
    }


    @if (!String.IsNullOrEmpty(ViewBag.ErrorMessage))
    {
        <script>
        var message = '@ViewBag.ErrorMessage';
        swal({
            title: 'Error Message',
            text: message,
            type:'error',
            background: '#fff url(http://www.planwallpaper.com/static/images/518151-backgrounds_W3qVPu2.jpg)'
        })
        </script>
    }
